lunpack[stdin] = @0 as ? : True then spacchettpush('positions', @0)

send_positions[stdin] = @0 as ? : True then push('stdout', @0); update('stdout', @0, {'type': 'positions'})

closest[stdin] = @0 as ? : True then push_closest('positions', @0)

barycenter[stdin] = @0 as ? : True then compute_bari_diam('temp', @0)

on_target[stdin] = @0 as ? : ball_on_target(@0) then push('elementary',
    {'type': 'on_target', 'time': @0.time})

off_target[stdin] = @0 as ? : ball_off_target(@0) then push('elementary', {'type': 'off_target',
    'time': @0.time})

quasi_goal[stdin] = @0 as ? : ball_goal(@0) then push('elementary',
    {'type': 'quasi_goal', 'time': @0.time})

penalty[stdin] = @0 as ? : is_penalty(@0) then push('int_stdout', {'type': 'penalty', 
    'time': @0.time, 'team': @0.team})

penalty[int_stdout] = @0 as PENALTY : True then push('stdout', {'type': 'penalty', 'time': @0.time, 
    'team': @0.team, 'start_time': @0.time, 'end_time': @0.time}); consume('int_stdout', @0)

// @rule(pressed)
// @description(Describes whether the ball owner is under pressure)
// @action(push)
// @returns({'type': 'player_pressed'})
pressed[stdin] = @0 as ? : is_pressed(@0) then push_pressed('stdout', @0, True)

// @rule(not_pressed)
// @description(Blah)
// @action(push)
// @returns({'type':'possession', 'time': <time>, 'player': {'id': <id>, 'team': <team> }, 'position': <position>, 'until': <time>})
not_pressed[stdin] = @0 as ? : not is_pressed(@0) then push_pressed('stdout', @0, False)

// @rule(possession)
// @description(Represents the possession)
// @action(push, consume)
// @returns({'type':'possession', 'time': <time>, 'player': {'id': <id>, 'team': <team> }, 'position': <position>, 'until': <time>})
possession[positions] = @0 as BALL -> .{0,0} -> @1 as CLOSEST :
    @1.time == @0.time and distance(@0.position, @1.position) < 0.5  and @1.team.value != -1 then
    push('elementary', {'type':'possession', 'time': trunc(@0.time), 'player': {'id': @1.id,
    'team': @1.team}, 'position': @0.position, 'until': trunc(@0.time)})

possession_merger[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as POSSESSION :
    @0.player.id.value == @1.player.id.value and @0.time != @1.time then consume('elementary', @1);
    update('elementary', @0, {'until': @1.time})

pass[elementary] = @0 as POSSESSION -> .{0,3} -> @1 as POSSESSION :
    @0.player.team == @1.player.team and @0.player.id.value !=
    @1.player.id.value then push(['elementary', 'int_stdout', 'fpass'], {'type': 'pass',
    'passer': @0.player, 'receiver': @1.player, 'time': trunc(@1.time), 'start_time': trunc(@0.time),
    'end_time': trunc(@1.time)}); push('int_stdout', @0)

intercept[elementary] = @0 as POSSESSION -> .{0,3} -> @1 as POSSESSION :
    @0.player.team != @1.player.team then push(['elementary', 'int_stdout', 'fpass'],
    {'type': 'intercept', 'ball_loser': @0.player, 'interceptor': @1.player,
    'time': @1.time, 'start_time': @0.time, 'end_time': @1.time}); push('int_stdout', @0)

shot_on_target[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as ON_TARGET :
    True then push('stdout', {'type': 'shot_on_target', 'time': @0.time, 'player_active': @0.player,
    'start_time': @0.time, 'end_time': @1.time}); push('int_stdout', @0)

shot_off_target[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as OFF_TARGET :
    True then push('stdout', {'type': 'shot_off_target', 'time': @0.time, 'player_active': @0.player,
    'start_time': @0.time, 'end_time': @1.time}); push('int_stdout', @0)

goal[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as ON_TARGET -> .{0,2} -> @2 as QUASI_GOAL :
    True then push(['stdout', 'elementary'], {'type': 'goal', 'time': @0.time, 'player_active': @0.player,
    'start_time': @0.time, 'end_time': @1.time}); push('int_stdout', @0)

tikitaka[fpass] = @0 as PASS -> @1 as PASS -> @2 as PASS ->
    @3 as PASS : @0.passer.team == @1.passer.team == @2.passer.team == @3.passer.team
    then push('strategy', {'type': 'quasi_tikitaka', 'team': @0.passer.team, 'time': mean(@0.time, @3.time), 'start_time': trunc(@0.time), 'end_time': trunc(@3.time)});
    clear('fpass')

tikitaka_out[strategy] = @0 as {'type': 'quasi_tikitaka'} -> .{0,5} -> @1 as {'type': 'quasi_tikitaka'} :
    @0.time < @1.time and @0.team == @1.team then
    push('stdout', {'type': 'tikitaka', 'team': @0.team, 'time': @1.time, 'start_time': @0.time, 'end_time': @1.time});
    consume('strategy', @0); consume('strategy', @1)

possession_stdout[int_stdout] = @0 as POSSESSION : True then push('stdout',
    {'type': 'possession', 'start_time': @0.time, 'end_time': @0.until, 'player_active':
    @0.player, 'time': @0.time}); consume('int_stdout', @0)

pass_stdout[int_stdout] = @0 as PASS : True then push('stdout', {'type': 'pass',
    'start_time': @0.start_time, 'end_time': @0.end_time, 'player_active': @0.passer, 'player_passive':
    @0.receiver, 'time': @0.time}); consume('int_stdout', @0)

intercept_stdout[int_stdout] = @0 as INTERCEPT : True then push('stdout', {'type':
    'intercept', 'start_time': @0.start_time, 'end_time': @0.end_time, 'player_active':
    @0.interceptor, 'player_passive': @0.ball_loser, 'time': @0.time}); consume('int_stdout', @0)

offside[positions] = .{0,1} -> @0 as {'type': 'player', 'team': -1, 'pose': 'offside'} : True
    then push(['elementary', 'int_stdout'], {'type':'offside', 'time':@0.time})

offside_stdout[int_stdout] = @0 as OFFSIDE : True
    then push('stdout', @0); update('stdout', @0, {'start_time': @0.time, 'end_time': @0.time}); consume('int_stdout', @0)

goal_revoked_offside[elementary] = @0 as GOAL -> {0,10} -> @1 as OFFSIDE : True
    then push(['elementary', 'stdout'], {'type': 'revoked_goal', 'reason': 'offside', 'start_time':
    @0.time, 'end_time': @1.time, 'time': @0.time}); consume('elementary', @0)

duel[stdin] = @0 as ? : checkTackle(@0) then push_tackle(['elementary', 'int_stdout'], @0)

duel_out[int_stdout] = @0 as DUEL : True then push('stdout', {'type': 'duel', 'time': @0.time,
    'player_passive': @.defender, 'def_team': @0.def_team, 'player_active': @0.attacker,
    'att_team': @0.att_team, 'position': @0.position, 'start_time': @0.time, 'end_time': @0.time}); 
    consume('int_stdout', @0)