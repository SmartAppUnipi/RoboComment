lunpack[stdin] = @0 as ? : True then spacchettpush('positions', @0)

send_positions[stdin] = @0 as ? : True then push('stdout', @0); update('stdout', @0, {'type': 'positions'})

closest[stdin] = @0 as ? : True then push_closest('positions', @0)

barycenter[stdin] = @0 as ? : True then compute_bari_diam('temp', @0)

on_target[stdin] = @0 as ? : ball_on_target(@0) then push('elementary',
    {'type': 'on_target', 'time': @0.time})

off_target[stdin] = @0 as ? : ball_off_target(@0) then push('elementary', {'type': 'off_target',
    'time': @0.time})

quasi_goal[stdin] = @0 as ? : ball_goal(@0) then push('elementary',
    {'type': 'quasi_goal', 'time': @0.time})

penalty[stdin] = @0 as ? : is_penalty(@0) then push('stdout', {'type': 'penalty', 'time': @0.time})

possession[positions] = @0 as {'type': 'ball'} -> .{0,0} -> @1 as {'type': 'closest'} :
    @1.time == @0.time and distance(@0.position, @1.position) < 0.5 then
    push('elementary', {'type':'possession', 'time': trunc(@0.time), 'player': {'id': @1.id,
    'team': @1.team}, 'position': @0.position, 'until': trunc(@0.time)})

possession_merger[elementary] = @0 as {'type': 'possession'} -> .{0,2} -> @1 as {'type': 'possession'} :
    @0.player.id.value == @1.player.id.value and @0.time != @1.time then consume('elementary', @1);
    update('elementary', @0, {'until': @1.time})

pass[elementary] = @0 as {'type': 'possession'} -> .{0,3} -> @1 as {'type': 'possession'} :
    @0.player.team == @1.player.team and @0.player.id.value !=
    @1.player.id.value then push(['elementary', 'int_stdout', 'fpass'], {'type': 'pass',
    'passer': @0.player, 'receiver': @1.player, 'time': trunc(@1.time), 'start_time': trunc(@0.time),
    'end_time': trunc(@1.time)}); push('int_stdout', @0)

intercept[elementary] = @0 as {'type': 'possession'} -> .{0,3} -> @1 as {'type': 'possession'} :
    @0.player.team != @1.player.team then push(['elementary', 'int_stdout', 'fpass'],
    {'type': 'intercept', 'ball_loser': @0.player, 'interceptor': @1.player,
    'time': @1.time, 'start_time': @0.time, 'end_time': @1.time}); push('int_stdout', @0)

shot_on_target[elementary] = @0 as {'type': 'possession'} -> .{0,2} -> @1 as {'type': 'on_target'} :
    True then push('stdout', {'type': 'shot_on_target', 'time':
    @0.time, 'player_active': @0.player}); push('int_stdout', @0)

shot_off_target[elementary] = @0 as {'type': 'possession'} -> .{0,2} -> @1 as {'type': 'off_target'} :
    True then push('stdout', {'type': 'shot_off_target', 'time': @0.time, 'player_active': @0.player});
    push('int_stdout', @0)

goal[elementary] = @0 as {'type': 'possession'} -> .{0,2} -> @1 as {'type': 'on_target'} -> .{0,2} -> @2 as {'type': 'quasi_goal'} :
    True then push('stdout', {'type': 'goal', 'time': @0.time, 'player_active': @0.player})

tikitaka[fpass] = @0 as {'type': 'pass'} -> @1 as {'type': 'pass'} -> @2 as {'type': 'pass' } ->
    @3 as {'type': 'pass'} : @0.passer.team == @1.passer.team == @2.passer.team == @3.passer.team
    then push('strategy', {'type': 'quasi_tikitaka', 'team': @0.passer.team, 'time': mean(@0.time, @3.time), 'start_time': trunc(@0.time), 'end_time': trunc(@3.time)});
    clear('fpass')

tikitaka_out[strategy] = @0 as {'type': 'quasi_tikitaka'} -> .{0,5} -> @1 as {'type': 'quasi_tikitaka'} :
    @0.time < @1.time and @0.team == @1.team then
    push('stdout', {'type': 'tikitaka', 'team': @0.team, 'time': @1.time, 'start_time': @0.time, 'end_time': @1.time});
    consume('strategy', @0); consume('strategy', @1)

pass_stdout[int_stdout] = @0 as {'type': 'pass'} : True then push('stdout', {'type': 'pass',
    'start_time': @0.start_time, 'end_time': @0.end_time, 'player_active': @0.passer, 'player_passive':
    @0.receiver, 'time': @0.time}); consume('int_stdout', @0)

intercept_stdout[int_stdout] = @0 as {'type': 'intercept'} : True then push('stdout', {'type':
    'intercept', 'start_time': @0.start_time, 'end_time': @0.end_time, 'player_active':
    @0.interceptor, 'player_passive': @0.ball_loser, 'time': @0.time}); consume('int_stdout', @0)

offside[positions] = .{0,1} -> @0 as {'type': 'player', 'team': -1, 'pose': 'offside'} : True 
    then push(['elementary', 'int_stdout'], {'type':'offside', 'time':@0.time})

offside_stdout[int_stdout] = @0 as {'type':'offside'} : True 
    then push('stdout', @0); update('stdout', @0, {'start_time': @0.time, 'end_time': @0.time}); consume('int_stdout', @0)

tackle[stdin] = @0 as ? : checkTackle('stdin', @0) then True    #Incomplete