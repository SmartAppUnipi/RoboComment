lunpack[stdin] = @0 as ? : True then spacchettpush('positions', @0)

send_positions[stdin] = @0 as ? : True then push('stdout', @0); update('stdout', @0, POSITIONS)

closest[stdin] = @0 as ? : True then push_closest('positions', @0)

barycenter[stdin] = @0 as ? : True then compute_bari_diam('temp', @0)

on_target[stdin] = @0 as ? : ball_on_target(@0) then push('elementary', {'type': 'on_target', 'time': @0.time})

off_target[stdin] = @0 as ? : ball_off_target(@0) then push('elementary', {'type': 'off_target', 'time': @0.time})

quasi_goal[stdin] = @0 as ? : ball_goal(@0) then push('elementary', {'type': 'quasi_goal', 'time': @0.time})

penalty[stdin] = @0 as ? : is_penalty(@0) then push('stdout', {'type': 'penalty', 'time': @0.time})

possession[positions] = @0 as BALL -> .{0,0} -> @1 as CLOSEST : @1.time == @0.time and distance(@0.position, @1.position) < 0.5  and @1.team.value != -1 then push('elementary', {'type':'possession', 'time': trunc(@0.time), 'player': {'id': @1.id, 'team': @1.team}, 'position': @0.position, 'until': trunc(@0.time)})

possession_merger[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as POSSESSION : @0.player.id.value == @1.player.id.value and @0.time != @1.time then consume('elementary', @1); update('elementary', @0, {'until': @1.time})

shot_on_target[elementary] = @0 as POSSESSION -> .{0,2} -> @1 as ON_TARGET : True then push('stdout', {'type': 'shot_on_target', 'time': @0.time, 'player_active': @0.player}); push('int_stdout', @0)

goal_revoked_offside[elementary] = @0 as GOAL -> {0,10} -> @1 as OFFSIDE : True then push(['elementary', 'stdout'], {'type': 'revoked_goal', 'reason': 'offside', 'start_time': @0.time, 'end_time': @1.time, 'time': @0.time}); consume('elementary', @0)
